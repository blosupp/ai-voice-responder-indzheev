from flask import Flask, request, Response
from twilio.twiml.voice_response import VoiceResponse
import requests
import tempfile
import subprocess
from dotenv import load_dotenv
from app.utils.whisper_service import transcribe_audio

from shutil import copyfile

import os
from pathlib import Path

load_dotenv()
NGROK_URL = os.getenv("NGROK_URL")

app = Flask(__name__)

@app.route("/voice-test", methods=["POST"])
def voice():
    print("üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –ø–æ–ª—É—á–µ–Ω")
    print(request.form)

    response = VoiceResponse()
    response.record(
        max_length=15,
        timeout=5,
        trim="trim-silence",
        play_beep=True,
        action=f"{NGROK_URL}/process-recording",
        method="POST"
    )

    return Response(str(response), mimetype="application/xml")

@app.route("/process-recording", methods=["POST"])
def process_recording():
    print("üéß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ")
    recording_url = request.form.get("RecordingUrl")


    if not recording_url:
        return "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏", 400

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º
        audio_url = f"{recording_url}.mp3"
        audio_data = requests.get(audio_url).content

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ mp3
        raw_path = tempfile.NamedTemporaryFile(suffix=".mp3", delete=False).name
        with open(raw_path, "wb") as f:
            f.write(audio_data)
        print("üì• –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤—Ö–æ–¥—è—â–µ–µ –∞—É–¥–∏–æ –∫–∞–∫ .raw:", raw_path)
        print("üì¶ –†–∞–∑–º–µ—Ä .raw —Ñ–∞–π–ª–∞:", os.path.getsize(raw_path), "–±–∞–π—Ç")


        # 2. –ì–æ—Ç–æ–≤–∏–º –ø—É—Ç—å –¥–ª—è –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ .wav
        converted_path = tempfile.NamedTemporaryFile(suffix=".wav", delete=False).name

        # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º raw ‚Üí wav, —É–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ mulaw
        result = subprocess.run([
            "C:\\tools\\ffmpeg\\bin\\ffmpeg.exe", "-y",
            "-i", raw_path,
            "-ar", "16000", "-ac", "1", "-acodec", "pcm_s16le", converted_path
        ], capture_output=True, text=True)

        if result.returncode != 0:
            print("‚ùå –û—à–∏–±–∫–∞ ffmpeg:")
            print(result.stderr)
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏", 500
        else:
            print("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ:", converted_path)
            print("üì¶ –†–∞–∑–º–µ—Ä .wav —Ñ–∞–π–ª–∞:", os.path.getsize(converted_path), "–±–∞–π—Ç")
            debug_wav_path = Path(__file__).parent / "audio" / "last_call.wav"
            copyfile(converted_path, debug_wav_path)
            print("üéß –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∫–æ–ø–∏—é .wav –≤:", debug_wav_path)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        user_text = transcribe_audio(converted_path)
        print("üß† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print("üëâ", user_text)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = VoiceResponse()
        response.say("–°–ø–∞—Å–∏–±–æ. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.", voice="Polly.Marlene", language="de-DE")

        return Response(str(response), mimetype="application/xml")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

if __name__ == "__main__":
    app.run(debug=True, port=5000)
