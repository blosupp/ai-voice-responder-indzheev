from flask import Flask, request, Response, send_file
from twilio.twiml.voice_response import VoiceResponse
import requests
import tempfile
import os
from dotenv import load_dotenv
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from app.utils.whisper_service import transcribe_audio
from utils.gpt_service import load_profile, generate_reply
from utils.elevenlabs_service import generate_voice_mp3


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
NGROK_URL = os.getenv("NGROK_URL")

app = Flask(__name__)

@app.route("/voice-test", methods=["POST"])
def voice():
    print("üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –ø–æ–ª—É—á–µ–Ω")
    print(request.form)

    response = VoiceResponse()

    # üü° –°–ª—É—à–∞–µ–º —Å—Ä–∞–∑—É
    response.record(
        max_length=10,
        action=f"{NGROK_URL}/process-recording",
        method="POST",
        play_beep=True,
        trim="trim-silence"
    )

    return Response(str(response), mimetype="application/xml")

@app.route("/process-recording", methods=["POST"])
def process_recording():
    print("üéß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    recording_url = request.form.get("RecordingUrl")

    if not recording_url:
        return "‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏", 400

    try:
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        audio_url = f"{recording_url}.mp3"
        print("üì• –°–∫–∞—á–∏–≤–∞–µ–º:", audio_url)
        audio_data = requests.get(audio_url).content

        tmp_audio_path = tempfile.NamedTemporaryFile(suffix=".mp3", delete=False).name
        with open(tmp_audio_path, "wb") as f:
            f.write(audio_data)
        print("üìÅ mp3 —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:", tmp_audio_path)

        # 2. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º
        user_text = transcribe_audio(tmp_audio_path)
        print("üó£Ô∏è –°–∫–∞–∑–∞–ª–∏:", user_text)

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        profile = load_profile()
        reply_text = generate_reply(user_text, profile)
        print("ü§ñ –û—Ç–≤–µ—Ç GPT:", reply_text)

        # 4. –û–∑–≤—É—á–∫–∞
        generate_voice_mp3(reply_text)

        # 5. –û—Ç–¥–∞—á–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        response = VoiceResponse()
        response.play(f"{NGROK_URL}/static/response.mp3")
        response.record(
            max_length=10,
            action=f"{NGROK_URL}/process-recording",
            method="POST",
            play_beep=True,
            trim="trim-silence"
        )

        return Response(str(response), mimetype="application/xml")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", e)
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

@app.route("/static/response.mp3")
def serve_audio():
    response_path = Path(__file__).parent / "static" / "response.mp3"

    if not response_path.exists():
        print("‚ùå –§–∞–π–ª response.mp3 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

    return send_file(response_path, mimetype="audio/mpeg")

if __name__ == "__main__":
    app.run(debug=True, port=5000)
